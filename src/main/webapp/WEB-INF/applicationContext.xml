<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd-4.0">

    <!--数据库配置信息-->
    <context:property-placeholder location="classpath*:system.properties"/>

    <!--Spring不扫描 @Controller 注解-->
    <context:component-scan base-package="cn.cxy">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--
        1、通过MethodInvokingJobDetailFactoryBean的targetObject与targetMethod属性指明具体执行的任务的位置
        TODO 此处该类为继承 QuartzJobBean 或实现 Job
    -->
    <!--<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="refreshAccessTokenTask"/>
        <property name="targetMethod" value="refreshAccessToken"/>
    </bean>-->

    <!--
        TODO 此类继承自 QuartzJobBean 或实现 Job
    -->
    <bean id="trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <bean class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
                <property name="jobClass" value="cn.cxy.quartz.RefreshAccessTokenJob"/>
            </bean>
        </property>
        <!--
         TODO cron 表达式
        -->
        <property name="cronExpression">
            <value>0/5 * * * * ? </value>
        </property>
    </bean>

    <!--
        声明触发器：
            1、SimpleTriggerFactoryBean可以使用startDelay与repeatInterval声明执行周期
            2、CronTriggerFactoryBean使用 cron 表达式
    -->
    <!--<bean id="trigger2" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail"/>
        <property name="startDelay" value="0"/>
        <property name="repeatInterval" value="2000"/>
    </bean>-->

    <!--
        调度器进行调度执行
    -->
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="trigger"/>
                <!--<ref bean="trigger2"/>-->
            </list>
        </property>
    </bean>

    <!--数据库连接池-->
    <bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--连接池初始值-->
        <property name="initialSize" value="1"/>
        <!--最小空闲值-->
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="100"/>
        <property name="maxIdle" value="20"/>
        <property name="maxWait" value="1000"/>
    </bean>

    <!--sessionFactory-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <!--事务管理器-->
    <bean class="org.springframework.orm.hibernate4.HibernateTransactionManager" id="transactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--配置哪些方法要加入事务控制-->
    <!--<tx:advice transaction-manager="transactionManager" id="transactionInterceptor">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="clear*" propagation="REQUIRED"/>
            <tx:method name="empty*" propagation="REQUIRED"/>
            <tx:method name="init*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="allMethods" expression="execution(cn.cxy.*.service.*.*(..))"/>
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="allMethods"/>
    </aop:config>-->

</beans>